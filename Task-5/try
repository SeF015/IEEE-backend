#include "bits/stdc++.h"
using namespace std;


struct Heap{
  int *arr;
  int countt;       //numbr of elements in the Heap
  int cap;        //size of heap
};


void resize_heap(Heap* h);

void fill_arr(int arr[], int Size);

int get_max(Heap* h);

Heap* CreatHeap(int capacity);
//precondition takes two arg the capacity and the type of heap
//postconditoin return a pointer to the heap

void Build_heap(Heap*h, int arr[], int Size);

void show_heap(Heap* h);

int Parent(Heap* h, int index);//formula to get the parent location (index-1)/2
//precondition takes two arg pointer to the heap and the index of the u want to get its Parent
//postconditoin return the location of the parent

 int Left_Chiled(Heap* h, int index);//formula to get the Left Chiled location (2*index + 1)

 int right_chiled(Heap* h, int index);//formula to get the Left Chiled location (2*index + 2)

 void percolate_down(Heap* h, int index);
 //precondition takes two arg pointer to the heap and an index
 //postconditoin heapifying the element at location index


/***************************
starting of the main
****************************/
int main(int argc, char const *argv[]) {
  int Size;
  cin >> Size;
  int arr[Size];
  fill_arr(arr,Size);
  Heap* h = CreatHeap(Size);
  Build_heap(h,arr,Size);
  show_heap(h);
  return 0;
}


void fill_arr(int arr[], int Size){
  for (int i = 0; i < Size; i++) {
    cin >> arr[i];
  }
}


int get_max(Heap* h){
  if (h->countt == 0) {
    return -1;
  }
  return h->arr[0];
}

Heap* CreatHeap(int capacity){
  Heap* h = new Heap;

  h->countt = 0 ;
  h->cap = capacity;
  h->arr = new int[capacity];
  return h;
}

int Parent(Heap* h, int index){
  if (index <= 0 || index >= h->countt) {
    return -1;
  }
  return ((index-1)/2);
}

int Left_Chiled(Heap* h, int index){
  int left = (2*index)+1;
  if (left >= h->countt) {
    return -1;
  }
  return left;
}

int right_chiled(Heap* h, int index){
  int right = (2*index)+2;
  if (right >= h->countt) {
    return -1;
  }
  return right;
}

void percolate_down(Heap* h, int index){
  int left, right, max, temp;
  left = Left_Chiled(h,index);
  right = right_chiled(h,index);
  if (left != -1 && h->arr[left] > h->arr[index]) {
    max = left;
  }
  else
    max = index;
  if (right != -1 && h->arr[right] > h->arr[max]) {
    max = right;
  }
  if (max != index) {
    temp = h->arr[index];
    h->arr[index] = h->arr[max];
    h->arr[max] = temp;
  }
  percolate_down(h,max);
}

void resize_heap(Heap* h){
  int* old_arr = h->arr;
  h->arr = new int[h->cap*2];

  for (int i = 0; i < h->cap; i++) {
    h->arr[i] = old_arr[i];
  }
  h->cap *=2;
  delete old_arr;
}
void Build_heap(Heap*h, int array[], int Size){
  if (h==NULL) {
    return;
  }

  while (Size> h->cap) {
    resize_heap(h);
  }
  for (int i = 0; i < Size; i++) {
    h->arr[i] = array[i];
  }
  h->countt = Size;
  for (int i = (Size-1)/2; i > 0; i--) {
    percolate_down(h,i);
  }
}

void show_heap(Heap* h){
  int temp;
  while(h->countt--){
  temp = h->arr[0];
  h->arr[0] = h->arr[h->countt-1];
  h->countt--;
  percolate_down(h,0);
  cout<< temp << " ";
  }
}
